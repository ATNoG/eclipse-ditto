version: '3.2'

volumes:
  # create a persistent volume for postgres first via: docker volume create --name postgres-data-volume -d local
  postgres-data-volume:
    external: true

services:
  mongodb:
    image: docker.io/mongo:3.4
    networks:
      default:
        aliases:
          - mongodb
    command: mongod --storageEngine wiredTiger --noscripting
    user: mongodb
    environment:
       TZ: Europe/Berlin

  policies:
    image: docker.io/eclipse/ditto-policies:${DITTO_VERSION:-latest}
    networks:
      default:
        aliases:
          - ditto-cluster
    environment:
      - TZ=Europe/Berlin
      - INSTANCE_INDEX=1
      - BIND_HOSTNAME=0.0.0.0
      - _JAVA_OPTIONS=-Xms256m -Xmx256m -Xss512k -XX:MaxMetaspaceSize=128m -XX:+ExitOnOutOfMemoryError -Dditto.cluster.become-leader=true
      - STATSD_PORT_8125_UDP_ADDR=graphite
      - STATSD_PORT_8125_UDP_PORT=8125

  things:
    image: docker.io/eclipse/ditto-things:${DITTO_VERSION:-latest}
    networks:
      default:
        aliases:
          - ditto-cluster
    depends_on:
      - policies
    command: sh -c "sleep 10; java -jar /starter.jar"
    environment:
      - TZ=Europe/Berlin
      - INSTANCE_INDEX=1
      - BIND_HOSTNAME=0.0.0.0
      - _JAVA_OPTIONS=-Xms256m -Xmx256m -Xss512k -XX:MaxMetaspaceSize=128m -XX:+ExitOnOutOfMemoryError
      - STATSD_PORT_8125_UDP_ADDR=graphite
      - STATSD_PORT_8125_UDP_PORT=8125

  things-search:
    image: docker.io/eclipse/ditto-things-search:${DITTO_VERSION:-latest}
    networks:
      default:
        aliases:
          - ditto-cluster
    depends_on:
      - policies
    command: sh -c "sleep 10; java -jar /starter.jar"
    environment:
      - TZ=Europe/Berlin
      - INSTANCE_INDEX=1
      - BIND_HOSTNAME=0.0.0.0
      - _JAVA_OPTIONS=-Xms256m -Xmx256m -Xss512k -XX:MaxMetaspaceSize=128m -XX:+ExitOnOutOfMemoryError
      - STATSD_PORT_8125_UDP_ADDR=graphite
      - STATSD_PORT_8125_UDP_PORT=8125

  gateway:
    image: docker.io/eclipse/ditto-gateway:${DITTO_VERSION:-latest}
    networks:
      default:
        aliases:
          - ditto-cluster
    depends_on:
      - policies
    command: sh -c "sleep 10; java -jar /starter.jar"
    environment:
      - TZ=Europe/Berlin
      - INSTANCE_INDEX=1
      - BIND_HOSTNAME=0.0.0.0
      - ENABLE_DUMMY_AUTH=false
      - _JAVA_OPTIONS=-Xms256m -Xmx256m -Xss512k -XX:MaxMetaspaceSize=128m -XX:+ExitOnOutOfMemoryError
      - STATSD_PORT_8125_UDP_ADDR=graphite
      - STATSD_PORT_8125_UDP_PORT=8125
      - DEVOPS_SECURE_STATUS=false
      - GATEWAY_PUBLIC_HEALTH_SECURE=false
      - DEVOPS_PASSWORD=${GATEWAY_DEVOPS_PASSWORD}
      - PUBLIC_HEALTH_PASSWORD=${GATEWAY_DEVOPS_PASSWORD}

  graphite:
    image: hopsoft/graphite-statsd:v0.9.15-phusion0.9.18
    ports:
      - target: 2003
        published: 2003
        protocol: tcp
        mode: host
    volumes:
      - "./graphite/storage/whisper:/opt/graphite/storage/whisper"
      - "./graphite/storage-schemas.conf:/opt/graphite/conf/storage-schemas.conf"
      - "./statsd/config.js:/opt/statsd/config.js"

  postgres:
    image: postgres:10.1-alpine
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: ${POSTGRES_ADMIN_PASSWORD:-admin}
    volumes:
      - "postgres-data-volume:/var/lib/postgresql/data"

  grafana:
    image: grafana/grafana:4.5.2
    depends_on:
      - postgres
    environment:
      TZ: Europe/Berlin
      GF_SERVER_ROOT_URL: http://localhost/grafana/
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_USER: admin
      GF_DATABASE_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_DATABASE_NAME: postgres
      GF_USERS_SIGNUP: "false"
      GF_ALLOW_ORG_CREATE: "false"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_AUTH_BASIC_ENABLED: "true"
      GF_SMTP_ENABLED: "false"

  swagger-ui:
    image: docker.io/swaggerapi/swagger-ui:v3.8.1
    volumes:
       - ../../documentation/src/main/resources/openapi:/usr/share/nginx/html/openapi:ro
       - ../../documentation/src/main/resources/images:/usr/share/nginx/html/images:ro
       - ./swagger-index.html:/usr/share/nginx/html/swagger-index.html:ro

  nginx:
    image: docker.io/nginx:1.13-alpine
    volumes:
       - ./nginx.conf:/etc/nginx/nginx.conf:ro
       - ./index.html:/etc/nginx/html/index.html:ro
       - ../nginx-cors.conf:/etc/nginx/nginx-cors.conf:ro
       - ../../documentation/src/main/resources/images:/etc/nginx/html/images:ro
    ports:
      - "8080:80"
    depends_on:
      - gateway
      - swagger-ui
      - grafana
