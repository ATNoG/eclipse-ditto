openapi: 3.0.0
info:
  title: Eclipse Ditto™ HTTP devops API
  version: '2'
  description: |-
    JSON-based, REST-like API for Eclipse Ditto

    The Eclipse Ditto HTTP API uses response status codes (see [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6))
    to indicate whether a specific request has been successfully completed, or not.

    The information Ditto provides additionally to the status code (e.g. in API docs, or error codes like. "things:thing.tooLarge") might change without advance notice.
    These are not be considered as official API, and must therefore not be applied in your applications or tests.
servers:
  - url: 'https://ditto.eclipseprojects.io/devops'
    description: online Ditto Sandbox
  - url: /devops
    description: local Ditto
tags:
  - name: Logging
    description: Manage Log Levels in runtime
  - name: Service Configuration
    description: Manage service configuration in runtime
  - name: Piggyback Commands
    description: Manage Piggyback commands
security:
  - DevOpsBasic: []
  - DevOpsBearer: []
paths:
  /logging:
    get:
      summary: Retrieve all currently configured log levels
      description: Return configured log level for all ditto cluster pod
      tags:
        - Logging
      parameters:
        - $ref: '#/components/parameters/LoggingFieldsQueryParam'
      responses:
        '200':
          description: Return The current value of logging level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveLoggingConfig'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
    put:
      summary: Update log levels
      description: Modify log level for eatch pods menaged
      tags:
        - Logging
      requestBody:
        description: Fields to update level log for each pods
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoggingUpdateFields'
            example: |-
              {
                "level": "info",
                "logger": "akka.actor.CoordinatedShutdown"
              }
      responses:
        '201':
          $ref: '#/components/responses/SuccessUpdateLogLevel'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
  '/logging/{moduleName}':
    get:
      summary: Retrieve currently configured log levels for a specific module
      description: Return the configured log
      tags:
        - Logging
      parameters:
        - $ref: '#/components/parameters/ModuleNamePathParam'
        - $ref: '#/components/parameters/LoggingFieldsQueryParam'
      responses:
        '200':
          description: Return The current value of logging level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
    put:
      summary: Update log levels for a specific module
      description: Return outcome modify log level for a specific module
      tags:
        - Logging
      parameters:
        - $ref: '#/components/parameters/ModuleNamePathParam'
      requestBody:
        description: Fields to update level log for module
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoggingUpdateFields'
            example: |-
              {
                "level": "info",
                "logger": "akka.actor.CoordinatedShutdown"
              }
      responses:
        '201':
          $ref: '#/components/responses/SuccessUpdateLogLevelSinglePod'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
  /config:
    get:
      summary: Retrieve the configuration at the specified path parameter
      description: |-
        It is recommended to not omit the query parameter path.
        Otherwise, the full configurations of all services are aggregated in the response, which can become megabytes big.
      tags:
        - Service Configuration
      parameters:
        - $ref: '#/components/parameters/PathParam'
      responses:
        '200':
          description: Return the configuration at the path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveConfig'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
  '/config/{moduleName}/{podName}':
    get:
      summary: Retrieving the configuration of a specific service instance.
      description: Return the configuration of a specific service instance.
      tags:
        - Service Configuration
      parameters:
        - $ref: '#/components/parameters/ModuleNamePathParam'
        - $ref: '#/components/parameters/NamePodParam'
        - $ref: '#/components/parameters/PathParam'
      responses:
        '200':
          description: Return The current value of specific service instance.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveConfigService'
              example: |-
                {
                  "gateway": {
                    "podName": {
                      "type": "common.responses:retrieveConfig",
                      "status": 200,
                      "config": {
                        "cluster": {
                          "cluster-status-roles-blocklist": [
                              "cluster1",
                              "......" ,
                              "clusterN"
                          ],
                          "number-of-shards": 20
                        },
                        "ddata": {
                          "vm arg1": "string",
                          ".............": "string",
                          "vm argn" : "string"
                        },
                        "devops": {
                          "feature": {
                            "merge-things-enabled": true
                          },
                          "namespace": {
                            "block-time": "string"
                          }
                        },
                        "gateway": {
                          "authentication": {
                            "devops": {
                              "devops-authentication-method": "string",
                              "password": "string",
                              "secured": true,
                              "status-authentication-method": "string",
                              "statusPassword": "string"
                            },
                            "http": {
                              "proxy": {
                                "enabled": false
                              }
                            },
                            "oauth": {
                              "allowed-clock-skew": "string",
                              "openid-connect-issuers": {
                                "google": {
                                  "issuer": "string"
                                }
                              },
                              "protocol": "https",
                              "token-integration-subject": "string"
                            },
                            "pre-authentication": {
                              "enabled": "true"
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
  /piggyback:
    post:
      summary: Send a piggyback command
      description: Send a piggyback command to Akka’s pub-sub-mediator
      tags:
        - Piggyback Commands
      parameters:
        - $ref: '#/components/parameters/TimeoutParam'
      requestBody:
        description: Fields to send a command
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasePiggybackCommandRequestSchema'
            examples:
              blockNamespace:
                description: Block all messages to a namespace
                value: |-
                  {
                    "targetActorSelection": "/system/distributedPubSubMediator",
                    "headers": {
                      "aggregate": false
                    },
                    "piggybackCommand": {
                      "type": "namespaces.commands:blockNamespace",
                      "namespace": "namespaceToBlock"
                    }
                  }
              shutdown:
                description: Shutdown all actors in a namespace
                value: |-
                  {
                    "targetActorSelection": "/system/distributedPubSubMediator",
                    "piggybackCommand": {
                      "type": "common.commands:shutdown",
                      "reason": {
                        "type": "purge-namespace",
                        "details": "namespaceToShutdown"
                      }
                    }
                  }
              purgeNamespace:
                description: Erase all data in a namespace from the persistence
                value: |-
                  {
                    "targetActorSelection": "/system/distributedPubSubMediator",
                    "headers": {
                      "aggregate": true,
                      "is-group-topic": true
                    },
                    "piggybackCommand": {
                      "type": "namespaces.commands:purgeNamespace",
                      "namespace": "namespaceToPurge"
                    }
                  }
              unblockNamespace:
                description: Unblock messages to a namespace
                value: |-
                  {
                    "targetActorSelection": "/system/distributedPubSubMediator",
                    "headers": {
                      "aggregate": false
                    },
                    "piggybackCommand": {
                      "type": "namespaces.commands:unblockNamespace",
                      "namespace": "namespaceToUnblock"
                    }
                  }
      responses:
        '200':
          description: Response of command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggybackManagingBackgroundCleanup'
              examples:
                blockNamespace:
                  value: |-
                    {
                      "type": "namespaces.responses:blockNamespace",
                      "status": 200,
                      "namespace": "namespaceToBlock",
                      "resourceType": "namespaces"
                    }
        '400':
          description: The request could not be completed. At least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
  '/piggyback/{serviceName}':
    post:
      summary: Send a piggyback command to a specific service
      description: Send a piggyback command to a specific service
      tags:
        - Piggyback Commands
      parameters:
        - $ref: '#/components/parameters/ServiceNameParam'
        - $ref: '#/components/parameters/TimeoutParam'
      requestBody:
        description: Fields to send a command
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasePiggybackCommandRequestSchema'
            examples:
              persistenceCleanup:
                description: Query background cleanup coordinator state
                value: |-
                  {
                    "targetActorSelection": "/user/<SERVICE_NAME>Root/persistenceCleanup",
                    "headers": {},
                    "piggybackCommand": {
                      "type": "status.commands:retrieveHealth"
                    }
                  }
      responses:
        '200':
          description: Return The current value of logging level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggybackManagingBackgroundCleanup'
              example: |-
                {
                  "things": {
                    "ditto-things-65f6dd5d7-htkwt": {
                      "type": "status.responses:retrieveHealth",
                      "status": 200,
                      "statusInfo": {
                        "status": "UP",
                        "details": [
                          {
                            "INFO": {
                              "state": "IN_QUIET_PERIOD",
                              "pid": ""
                              }
                          }
                        ]
                      }
                    }
                  }
                }
        '400':
          description: The request could not be completed. At least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
  '/piggyback/{serviceName}/{instanceIndex}':
    post:
      summary: Send a piggyback command to a specific instance of service
      description: Send a piggyback command to a specific instance of service
      tags:
        - Piggyback Commands
      parameters:
        - $ref: '#/components/parameters/ServiceNameParam'
        - $ref: '#/components/parameters/InstanceIndex'
        - $ref: '#/components/parameters/TimeoutParam'
      requestBody:
        description: Fields to send a command
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasePiggybackCommandRequestSchema'
            examples:
              cleanup:
                description: Cleanup events and snapshots of an entity
                value: |-
                  {
                    "targetActorSelection": "/system/sharding/thing",
                    "headers": {
                      "aggregate": false
                    },
                    "piggybackCommand": {
                      "type": "cleanup.sudo.commands:cleanupPersistence",
                      "entityId": "ditto:thing1"
                    }
                  }
      responses:
        '200':
          description: response of command
          content:
            application/json:
              example: |-
                {
                  "type": "cleanup.sudo.responses:cleanupPersistence",
                  "status": 200,
                  "entityId": "thing:ditto:thing1"
                }
        '400':
          description: The request could not be completed. At least one of the defined query parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '401':
          description: The request could not be completed due to missing authentication.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TextUnauthorizeError'
components:
  responses:
    SuccessUpdateLogLevel:
      description: Return The summary of the outcome of all modified pods
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ResultUpdateRequest'
    SuccessUpdateLogLevelSinglePod:
      description: Return The summary of the outcome of modified pod
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModuleUpdatedLogLevel'
  parameters:
    LoggingFieldsQueryParam:
      name: includeDisabledLoggers
      in: query
      description: Include disabled loggers
      required: false
      schema:
        type: boolean
        default: false
    TimeoutParam:
      name: timeout
      in: query
      description: |-
        Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested
        acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or
        together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.

        The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for
        the command resulting in setting `response-required=false`.
      required: false
      schema:
        type: string
    ModuleNamePathParam:
      name: moduleName
      in: path
      description: The name of module
      required: true
      schema:
        type: string
        example: gateway
    PathParam:
      name: path
      in: query
      description: 'The path points to information on service name, service instance index, JVM arguments and environment variables.'
      schema:
        type: string
        example: ditto.info
      required: false
    NamePodParam:
      name: podName
      in: path
      description: The name of pod
      required: true
      schema:
        type: string
        example: ditto-gateway-764fc5f474-qrm2r
    ServiceNameParam:
      name: serviceName
      in: path
      description: Specified service target for the command execution
      required: true
      schema:
        type: string
        enum:
          - things
          - policies
          - connectivity
    InstanceIndex:
      name: instanceIndex
      in: path
      description: The index of the current instance
      required: true
      schema:
        type: string
  schemas:
    AdvancedError:
      properties:
        status:
          type: integer
          description: The HTTP status of the error
        error:
          type: string
          description: The error code of the occurred exception
        message:
          type: string
          description: The message of the error - what went wrong
        description:
          type: string
          description: A description how to fix the error or more details
        href:
          type: string
          description: A link to further information about the error and how to fix it
      required:
        - status
        - error
        - message
    TextUnauthorizeError:
      type: string
      example: The supplied authentication is invalid
    RetrieveConfig:
      type: object
      properties:
        gateway:
          type: object
          description: Module
          properties:
            pod:
              type: object
              description: Return the configuration at the path ditto.info
              properties:
                type:
                  type: string
                  description: 'devops.responses:ResultConfig'
                status:
                  type: integer
                  description: The HTTP status
                config:
                  type: object
                  description: name of service
                  properties:
                    env:
                      items:
                        type: string
                      properties:
                        PATH:
                          type: string
                    service:
                      items:
                        type: string
                      properties:
                        instance-index:
                          type: integer
                        service-name:
                          type: string
                    vm-args:
                      items:
                        type: string
    RetrieveLoggingConfig:
      properties:
        gateway:
          $ref: '#/components/schemas/Module'
    Module:
      type: object
      description: Module
      properties:
        pod:
          type: object
          description: Details of logging configuration
          properties:
            type:
              type: string
              description: 'devops.responses:retrieveLoggerConfig'
            status:
              type: integer
              description: The HTTP status
            serviceName:
              type: string
              description: name of service
            instance:
              type: string
              description: instance of module
            loggerConfigs:
              type: array
              items:
                type: object
                properties:
                  level:
                    type: string
                  logger:
                    type: string
    LoggingUpdateFields:
      properties:
        level:
          type: string
        logger:
          type: string
          description: class where apply logger level
    UpdatedLogLevel:
      type: object
      description: Details of logging configuration
      properties:
        type:
          type: string
          description: 'devops.responses:changeLogLevel'
        status:
          type: integer
          description: http code 200 for success operation
        serviceName:
          type: string
          description: name of service that has been updated
        instance:
          type: string
          description: identifier of pod instance
        successfull:
          type: boolean
          description: outcome of the change
    ModuleUpdatedLogLevel:
      type: object
      description: Module that has been updated
      properties:
        pod:
          $ref: '#/components/schemas/UpdatedLogLevel'
    ResultUpdateRequest:
      type: object
      properties:
        gateway:
          $ref: '#/components/schemas/ModuleUpdatedLogLevel'
        things-search:
          $ref: '#/components/schemas/ModuleUpdatedLogLevel'
        policies:
          $ref: '#/components/schemas/ModuleUpdatedLogLevel'
        things:
          $ref: '#/components/schemas/ModuleUpdatedLogLevel'
        connectivity:
          $ref: '#/components/schemas/ModuleUpdatedLogLevel'
    ModuleConfigService:
      type: object
      description: Module
      properties:
        pod:
          $ref: '#/components/schemas/ResultConfigService'
    ResultConfigService:
      type: object
      description: Details of specific service instance.
      properties:
        type:
          type: string
          description: 'devops.responses:ResultConfigService'
        status:
          type: integer
          description: The HTTP status
        config:
          type: object
          description: name of service
          properties:
            cluster:
              items:
                type: string
              properties:
                number-of-shards:
                  type: integer
            gateway:
              items:
                type: object
              properties:
                authentication:
                  type: object
                  properties:
                    devops:
                      type: object
                      properties:
                        password:
                          type: string
                        secured:
                          type: boolean
    RetrieveConfigService:
      type: object
      properties:
        gateway:
          $ref: '#/components/schemas/ModuleConfigService'
    BasePiggybackCommandRequestSchema:
      properties:
        targetActorSelection:
          type: string
        headers:
          type: object
          properties:
            aggregate:
              type: boolean
              default: false
            is-group-topic:
              type: boolean
              default: true
        piggybackCommand:
          type: object
          properties:
            type:
              type: string
    PiggybackManagingBackgroundCleanup:
      properties:
        targetActorSelection:
          type: string
        headers:
          type: object
          properties:
            aggregate:
              type: boolean
              default: false
            is-group-topic:
              type: boolean
              default: true
        piggybackCommand:
          type: object
          properties:
            type:
              type: string
  securitySchemes:
    DevOpsBasic:
      type: http
      description: Eclipse Ditto devops user (devops) + password (foobar)
      scheme: basic
    DevOpsBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: A JSON Web Token issued by a supported OAuth 2.0 Identity Provider for the Eclipse Ditto devops user.
