# Copyright (c) 2020 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
get:
  summary: Retrieve all Connections
  description: |-
    Returns all connections.

  tags:
    - Connections
  responses:
    '200':
      description: The request successfully returned the connections.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '../../schemas/connections/connection.yml'
    '400':
      description: |-
        The request could not be completed.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '401':
      description: The request could not be completed due to missing authentication.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '402':
      description: The request could not be completed due to exceeded transaction count.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '403':
      description: The request could not be completed due to an invalid authentication.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '404':
      description: |-
        The request could not be completed. Connections not found.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
post:
  summary: Create a new Connection
  description: |-
    Creates the connection defined in the JSON body.
    The ID of the connection will be **generated** by the backend. Any `ID` specified in the request body is therefore
    prohibited.
    Supported connection types are `amqp-091`, `amqp-10`, `mqtt`, `kafka` and `http`.
    The connection defines a `ConnectionStatus` mapping and references it by its ID `status` in the
    telemetry/event source.
  tags:
    - Connections
  parameters:
    - name: dry-run
      in: query
      description: |-
        When set to true, the request will not try to create the connection, but only try to connect it.
        You can use this parameter to verify that the given connection is able to communicate with your external
        system.
      required: false
      schema:
        type: boolean
  responses:
    '200':
      description: |-
        Will be returned when a dry-run succeeded (see description of the dry-run query parameter for further
        information).
    '201':
      description: The connection was successfully created.
      headers:
        Location:
          description: The location of the created connection resource.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '../../schemas/connections/connection.yml'
    '400':
      description: |-
        The request could not be completed. Possible reasons:
        * an `ID` was set in the request body, but the ID will be generated by Bosch IoT Things
        * the JSON of the connection to be created is invalid
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '401':
      description: The request could not be completed due to missing authentication.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '402':
      description: The request could not be completed due to exceeded transaction count.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '403':
      description: The request could not be completed due to invalid authentication.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
    '404':
      description: |-
        The request could not be completed. Connections not found.
      content:
        application/json:
          schema:
            $ref: '../../schemas/errors/advancedError.yml'
  requestBody:
    content:
      application/json:
        schema:
          $ref: '../../schemas/connections/newConnection.yml'
        example: {
          "name": "hono-example-connection-123",
          "connectionType": "amqp-10",
          "connectionStatus": "open",
          "uri": "amqps://user:password@hono.eclipse.org:5671",
          "sources": [
            {
              "addresses": [
                "telemetry/FOO",
                "..."
              ],
              "authorizationContext": [
                "ditto:inbound-auth-subject",
                "..."
              ],
              "consumerCount": 1,
              "enforcement": {
                "input": "{{ header:device_id }}",
                "filters": [
                  "{{ thing:id }}"
                ]
              },
              "payloadMapping": [
                "Ditto",
                "status"
              ]
            }
          ],
          "targets": [
            {
              "address": "events/twin",
              "topics": [
                "_/_/things/twin/events"
              ],
              "authorizationContext": [
                "ditto:outbound-auth-subject",
                "..."
              ],
              "headerMapping": {
                "message-id": "{{ header:correlation-id }}",
                "content-type": "application/vnd.eclipse.ditto+json"
              }
            }

          ]
        }
    description: |-
      The example below shows a connection to Bosch IoT Hub.
    required: true
