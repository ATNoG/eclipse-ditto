akka.cluster {

  # Akka built-in split brain resolver
  downing-provider-class = akka.cluster.sbr.SplitBrainResolverProvider

  # Akka built-in split brain resolver configuration
  split-brain-resolver {
    # Possible to switch to "lease-majority" when run in a kubernetes cluster,
    # so that the surviving minority does not down itself when a majority crashes.
    # Additional configuration required for Kubernetes:
    # https://doc.akka.io/docs/akka/current/split-brain-resolver.html#lease
    active-strategy = keep-majority
    active-strategy = ${?CLUSTER_DOWNING_ACTIVE_STRATEGY}

    # how to find the right value:
    # https://doc.akka.io/docs/akka/current/split-brain-resolver.html
    stable-after = 8s
    stable-after = ${?CLUSTER_DOWNING_STABLE_AFTER}

    # if reachability of previous cluster members kept changing for this duration then
    # all cluster members are downed. The default "on" means 0,75x stable-after max between the first node becoming
    # unreachable and the last for the cluster not to down itself.
    down-all-when-unstable = on
    down-all-when-unstable = ${?CLUSTER_DOWNING_DOWN_ALL_WHEN_UNSTABLE}
  }
}
